#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π SDK Lava.top
"""

import os
import sys
import django
from decimal import Decimal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
sys.path.insert(0, '/Users/berik/Desktop/tg-nanobanana')
django.setup()

from django.conf import settings

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SDK
try:
    from lava_top_sdk import LavaClient, LavaClientConfig, InvoiceRequestDto, PaymentCreateRequest
    print("‚úÖ SDK —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ SDK: {e}")
    sys.exit(1)


def test_lava_sdk():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é SDK Lava.top
    """

    print("\n" + "=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–§–ò–¶–ò–ê–õ–¨–ù–û–ô SDK LAVA.TOP")
    print("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    api_key = getattr(settings, 'LAVA_API_KEY', None)

    if not api_key:
        print("‚ùå LAVA_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings.py")
        return

    print(f"‚úÖ API Key: {api_key[:10]}...{api_key[-4:]}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = LavaClientConfig(
            api_key=api_key,
            webhook_secret_key=getattr(settings, 'LAVA_WEBHOOK_SECRET', None),
            env='production'
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        client = LavaClient(config=config)
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã SDK:")
    print("-" * 40)

    methods = [method for method in dir(client) if not method.startswith('_')]
    for method in methods:
        if callable(getattr(client, method)):
            print(f"  ‚Ä¢ {method}")

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç
    print("\nüí≥ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞ —á–µ—Ä–µ–∑ SDK:")
    print("-" * 40)

    try:
        # –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ (100 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ $5)
        order_id = f"sdk_test_{os.urandom(4).hex()}"

        payment_request = PaymentCreateRequest(
            amount=5.00,  # –°—É–º–º–∞ –≤ USD
            order_id=order_id,
            currency="USD",
            description="–ü–æ–∫—É–ø–∫–∞ 100 —Ç–æ–∫–µ–Ω–æ–≤",
            success_url=f"{settings.PUBLIC_BASE_URL}/payment/success",
            fail_url=f"{settings.PUBLIC_BASE_URL}/payment/fail",
            hook_url=f"{settings.PUBLIC_BASE_URL}/api/miniapp/lava-webhook",
            custom_fields={
                "credits": 100,
                "test": True
            }
        )

        print(f"  Order ID: {payment_request.order_id}")
        print(f"  Amount: ${payment_request.amount}")
        print(f"  Currency: {payment_request.currency}")

        # –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂
        invoice_response = client.create_one_time_payment(payment_request)

        if invoice_response:
            print(f"‚úÖ –°—á—ë—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"  Invoice ID: {invoice_response.id}")
            print(f"  Payment URL: {invoice_response.url}")
            print(f"  Status: {invoice_response.status}")
            print(f"  Expires: {invoice_response.expired}")

            # –°–æ—Ö—Ä–∞–Ω–∏–º ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            invoice_id = invoice_response.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞
            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—á—ë—Ç–∞:")
            print("-" * 40)

            status_response = client.get_invoice_status(invoice_id)
            if status_response:
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω: {status_response.status}")
                print(f"  Amount: ${status_response.sum}")
                print(f"  Created: {status_response.created_at}")
            else:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å")

        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SDK: {e}")
        import traceback
        traceback.print_exc()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook signature
    print("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook:")
    print("-" * 40)

    test_payload = {
        "id": "test_invoice_123",
        "status": "success",
        "sum": 5.00,
        "order_id": "test_order_123"
    }

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏, –Ω–æ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∫–∞–∫ SDK —ç—Ç–æ –¥–µ–ª–∞–µ—Ç
    print("  ‚ÑπÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ SDK")

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)
    print("\nüìå SDK –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("  1. –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("  2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–æ–≤")
    print("  3. –í–∞–ª–∏–¥–∞—Ü–∏—è webhook –ø–æ–¥–ø–∏—Å–µ–π")
    print("  4. –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö (Pydantic)")
    print("  5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")

    print("\n‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SDK:")
    print("  ‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç Lava.top")
    print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö endpoints")
    print("  ‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("  ‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å API")


if __name__ == "__main__":
    test_lava_sdk()