"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from botapp.states import BotStates
from botapp.keyboards import (
    get_video_models_keyboard,
    get_video_format_keyboard,
    get_cancel_keyboard,
    get_main_menu_inline_keyboard,
    get_generation_start_message
)
from botapp.models import TgUser, AIModel, GenRequest
from botapp.business.generation import GenerationService
from botapp.business.balance import BalanceService, InsufficientBalanceError
from botapp.tasks import generate_video_task, extend_video_task
from asgiref.sync import sync_to_async

router = Router()


@router.message(F.text == "üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ")
async def create_video_start(message: Message, state: FSMContext):
    """
    –®–∞–≥ 1: –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    """
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∏–¥–µ–æ
    models = await sync_to_async(list)(
        AIModel.objects.filter(type='video', is_active=True).order_by('order')
    )

    if not models:
        await message.answer(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —Å inline –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
    await message.answer(
        "üé¨ **–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:**",
        reply_markup=get_video_models_keyboard(models),
        parse_mode="Markdown"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    await state.set_state(BotStates.video_select_model)


@router.callback_query(F.data.startswith("vid_model:"))
async def select_video_model(callback: CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 2: –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∂–¥–µ–º –ø—Ä–æ–º—Ç
    """
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º slug –º–æ–¥–µ–ª–∏ –∏–∑ callback data
    model_slug = callback.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –ë–î
    try:
        model = await sync_to_async(AIModel.objects.get)(slug=model_slug, is_active=True)
    except AIModel.DoesNotExist:
        await callback.message.answer(
            "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_model=model_slug, model_id=model.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await sync_to_async(TgUser.objects.get)(chat_id=callback.from_user.id)
    balance = await sync_to_async(BalanceService.get_balance)(user)

    if balance < model.price:
        await callback.message.answer(
            f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤**\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: ‚ö° {balance:.2f} —Ç–æ–∫–µ–Ω–æ–≤\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ‚ö° {model.price} —Ç–æ–∫–µ–Ω–æ–≤\n\n"
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ ‚ö° {model.price - balance:.2f} —Ç–æ–∫–µ–Ω–æ–≤",
            parse_mode="Markdown",
            reply_markup=get_main_menu_inline_keyboard()
        )
        await state.clear()
        return

    default_params = model.default_params or {}
    default_duration = default_params.get('duration', 8)
    default_resolution = default_params.get('resolution', '720p')
    default_aspect_ratio = default_params.get('aspect_ratio', '16:9')

    info_message = (
        f"–ú–æ–¥–µ–ª—å: {model.name}.\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ‚ö°{model.price:.2f} —Ç–æ–∫–µ–Ω–æ–≤.\n"
        f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ {default_resolution} –∏ –¥–æ {default_duration} —Å–µ–∫—É–Ω–¥.\n"
        "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ txt2video –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç.\n"
        "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ img2video –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç."
    )

    await callback.message.answer(
        info_message,
        reply_markup=get_cancel_keyboard()
    )

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ:",
        reply_markup=get_video_format_keyboard()
    )

    await state.set_state(BotStates.video_select_format)
    await state.update_data(
        model_slug=model_slug,
        model_id=model.id,
        model_name=model.display_name,
        supports_images=model.supports_image_input,
        default_duration=default_duration,
        default_resolution=default_resolution,
        default_aspect_ratio=default_aspect_ratio,
        generation_type='text2video'
    )


@router.message(BotStates.video_select_format)
async def wait_format_selection(message: Message, state: FSMContext):
    """–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=get_video_format_keyboard()
    )


@router.callback_query(BotStates.video_select_format, F.data.startswith("video_format:"))
async def set_video_format(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –ø—Ä–æ–º—Ç–∞."""
    await callback.answer()

    ratio_raw = callback.data.split(":", maxsplit=1)[1]
    aspect_ratio = ratio_raw.replace("_", ":") if "_" in ratio_raw else ratio_raw

    data = await state.get_data()
    supports_images = data.get('supports_images', False)

    await state.update_data(
        selected_aspect_ratio=aspect_ratio,
        generation_type='text2video',
        input_image_file_id=None,
        input_image_mime_type=None
    )

    intro = [
        f"–§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: {aspect_ratio}",
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.",
    ]
    if supports_images:
        intro.append("–õ–∏–±–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º img2video.")

    await callback.message.answer(
        "\n".join(intro),
        reply_markup=get_cancel_keyboard()
    )

    await state.set_state(BotStates.video_wait_prompt)


@router.message(BotStates.video_wait_prompt, F.photo)
async def receive_image_for_video(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (image2video)
    """
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not data.get('supports_images'):
        await message.answer(
            "‚ùå –≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
    photo = message.photo[-1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        input_image_file_id=photo.file_id,
        input_image_mime_type='image/jpeg'
    )

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    await message.answer(
        "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
        reply_markup=get_cancel_keyboard()
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞ –¥–ª—è image2video
    await state.set_state(BotStates.video_wait_prompt)
    await state.update_data(generation_type='image2video')


@router.message(BotStates.video_wait_prompt, F.text)
async def handle_video_prompt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (txt2video / img2video)."""
    data = await state.get_data()
    prompt = message.text.strip()

    try:
        model = await sync_to_async(AIModel.objects.get)(id=data['model_id'])
    except (KeyError, AIModel.DoesNotExist):
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª—å. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        await state.clear()
        return

    if len(prompt) > model.max_prompt_length:
        await message.answer(
            f"‚ùå –ü—Ä–æ–º—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {model.max_prompt_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–í–∞—à –ø—Ä–æ–º—Ç: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return

    generation_type = data.get('generation_type', 'text2video')
    default_duration = data.get('default_duration') or model.default_params.get('duration') or 8
    default_resolution = data.get('default_resolution') or model.default_params.get('resolution') or '720p'
    default_aspect_ratio = data.get('default_aspect_ratio') or model.default_params.get('aspect_ratio') or '16:9'
    selected_aspect_ratio = data.get('selected_aspect_ratio') or default_aspect_ratio

    generation_params = {
        'duration': default_duration,
        'resolution': default_resolution,
        'aspect_ratio': selected_aspect_ratio,
    }

    input_image_file_id = data.get('input_image_file_id')
    input_image_mime_type = data.get('input_image_mime_type', 'image/jpeg')
    source_media = {}

    if generation_type == 'image2video' and input_image_file_id:
        generation_params['input_image_file_id'] = input_image_file_id
        generation_params['input_image_mime_type'] = input_image_mime_type
        source_media['telegram_file_id'] = input_image_file_id
        source_media['mime_type'] = input_image_mime_type
    else:
        generation_type = 'text2video'

    user = await sync_to_async(TgUser.objects.get)(chat_id=message.from_user.id)

    try:
        gen_request = await sync_to_async(GenerationService.create_generation_request)(
            user=user,
            ai_model=model,
            prompt=prompt,
            quantity=1,
            generation_type=generation_type,
            generation_params=generation_params,
            duration=default_duration,
            video_resolution=default_resolution,
            aspect_ratio=selected_aspect_ratio,
            input_image_file_id=input_image_file_id,
            source_media=source_media
        )
    except InsufficientBalanceError as exc:
        await message.answer(str(exc), reply_markup=get_main_menu_inline_keyboard())
        await state.clear()
        return
    except ValueError as exc:
        await message.answer(str(exc), reply_markup=get_main_menu_inline_keyboard())
        await state.clear()
        return
    except Exception as exc:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {exc}",
            reply_markup=get_main_menu_inline_keyboard()
        )
        await state.clear()
        return

    await message.answer(
        get_generation_start_message(),
        reply_markup=get_main_menu_inline_keyboard()
    )

    generate_video_task.delay(gen_request.id)
    await state.clear()


@router.callback_query(F.data.startswith("extend_video:"))
async def prompt_video_extension(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—é –≤–∏–¥–µ–æ."""
    await callback.answer()

    try:
        request_id = int(callback.data.split(":", maxsplit=1)[1])
    except (ValueError, IndexError):
        await callback.message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ –ø—Ä–æ–¥–ª–∏—Ç—å.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return

    try:
        gen_request = await sync_to_async(
            GenRequest.objects.select_related("ai_model", "user").get
        )(id=request_id)
    except GenRequest.DoesNotExist:
        await callback.message.answer(
            "–≠—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return

    if gen_request.chat_id != callback.from_user.id:
        await callback.answer("–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –≤–∏–¥–µ–æ.", show_alert=True)
        return

    if gen_request.status != "done" or not gen_request.result_urls:
        await callback.message.answer(
            "–í–∏–¥–µ–æ –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return

    model = gen_request.ai_model
    if not model:
        await callback.message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return
    if model.provider != "veo":
        await callback.answer("–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è Veo.", show_alert=True)
        return

    aspect_ratio = gen_request.aspect_ratio or gen_request.generation_params.get("aspect_ratio") or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    cost_text = f"‚ö° –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {model.price:.2f} —Ç–æ–∫–µ–Ω–æ–≤."

    await state.update_data(
        extend_parent_request_id=gen_request.id,
    )
    await state.set_state(BotStates.video_extend_prompt)

    prompt_text = (
        "–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å –≤–∞—à —Ä–æ–ª–∏–∫ –µ—â—ë –Ω–∞ 8 —Å–µ–∫—É–Ω–¥.\n\n"
        f"–ú–æ–¥–µ–ª—å: {model.display_name}\n"
        f"–ê—Å–ø–µ–∫—Ç: {aspect_ratio}\n"
        f"{cost_text}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª."
    )

    await callback.message.answer(prompt_text, reply_markup=get_cancel_keyboard())


@router.message(BotStates.video_extend_prompt, F.text)
async def handle_video_extension_prompt(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É."""
    text = message.text.strip()
    if text.lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel"}:
        await state.clear()
        await message.answer(
            "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return

    data = await state.get_data()
    parent_request_id = data.get("extend_parent_request_id")

    if not parent_request_id:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        await state.clear()
        return

    try:
        parent_request = await sync_to_async(
            GenRequest.objects.select_related("ai_model", "user").get
        )(id=parent_request_id)
    except GenRequest.DoesNotExist:
        await message.answer(
            "–≠—Ç–æ –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        await state.clear()
        return

    if parent_request.chat_id != message.from_user.id:
        await message.answer(
            "–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –≤–∏–¥–µ–æ.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        await state.clear()
        return

    model = parent_request.ai_model
    if not model:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        await state.clear()
        return

    if len(text) > model.max_prompt_length:
        await message.answer(
            f"‚ùå –ü—Ä–æ–º—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {model.max_prompt_length} —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_cancel_keyboard()
        )
        return

    if not parent_request.result_urls:
        await message.answer(
            "–ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        await state.clear()
        return

    aspect_ratio = (
        parent_request.aspect_ratio
        or parent_request.generation_params.get("aspect_ratio")
        or (model.default_params or {}).get("aspect_ratio")
        or "16:9"
    )
    resolution = (
        parent_request.video_resolution
        or parent_request.generation_params.get("resolution")
        or (model.default_params or {}).get("resolution")
        or "720p"
    )

    generation_params = {
        "duration": 8,
        "aspect_ratio": aspect_ratio,
        "resolution": resolution,
        "extend_parent_request_id": parent_request.id,
    }
    source_media = {
        "parent_request_id": parent_request.id,
        "parent_result_url": parent_request.result_urls[0],
    }

    try:
        gen_request = await sync_to_async(GenerationService.create_generation_request)(
            user=parent_request.user,
            ai_model=model,
            prompt=text,
            quantity=1,
            generation_type='image2video',
            generation_params=generation_params,
            duration=8,
            video_resolution=resolution,
            aspect_ratio=aspect_ratio,
            source_media=source_media,
            parent_request=parent_request,
        )
    except InsufficientBalanceError as exc:
        await message.answer(str(exc), reply_markup=get_main_menu_inline_keyboard())
        await state.clear()
        return
    except ValueError as exc:
        await message.answer(str(exc), reply_markup=get_main_menu_inline_keyboard())
        await state.clear()
        return
    except Exception as exc:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {exc}",
            reply_markup=get_main_menu_inline_keyboard()
        )
        await state.clear()
        return

    await message.answer(
        get_generation_start_message(),
        reply_markup=get_main_menu_inline_keyboard()
    )

    extend_video_task.delay(gen_request.id)
    await state.clear()


@router.message(BotStates.video_extend_prompt)
async def remind_extension_prompt(message: Message):
    """–ï—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞."""
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.",
        reply_markup=get_cancel_keyboard()
    )


@router.callback_query(F.data == "main_menu")
async def handle_main_menu_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    """
    await callback.answer()

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await state.set_state(BotStates.main_menu)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–∑ menu.py
    from django.conf import settings
    from botapp.keyboards import get_main_menu_keyboard

    PAYMENT_URL = getattr(settings, 'PAYMENT_MINI_APP_URL', 'https://example.com/payment')

    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard(PAYMENT_URL)
    )
