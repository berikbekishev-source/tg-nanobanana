"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery
from aiogram.fsm.context import FSMContext
from decimal import Decimal
from django.conf import settings
from django.utils import timezone
from asgiref.sync import sync_to_async

from botapp.states import BotStates
from botapp.keyboards import (
    get_back_to_menu_keyboard,
    get_main_menu_inline_keyboard,
    format_balance
)
from botapp.models import TgUser, Transaction, Promocode
from botapp.business.balance import BalanceService

router = Router()


@router.message(F.text == "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def deposit_from_menu(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    –°—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Mini App
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    username = message.from_user.username or ""
    payment_url = getattr(settings, 'PAYMENT_MINI_APP_URL', 'https://example.com/payment')
    payment_url_with_params = f"{payment_url}?user_id={user_id}&username={username}"

    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import WebAppInfo

    builder = InlineKeyboardBuilder()
    builder.button(
        text="üí≥ –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã",
        web_app=WebAppInfo(url=payment_url_with_params)
    )

    await message.answer(
        "üí≥ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞**\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n"
        "‚≠ê Telegram Stars\n"
        "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await message.answer(
        "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:",
        reply_markup=get_back_to_menu_keyboard()
    )


@router.callback_query(F.data.startswith("payment_success:"))
async def handle_payment_success(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Mini App
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ Mini App –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    """
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    data_parts = callback.data.split(":")
    if len(data_parts) < 3:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return

    transaction_id = data_parts[1]
    amount = Decimal(data_parts[2])

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await sync_to_async(TgUser.objects.get)(chat_id=callback.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    try:
        transaction = await sync_to_async(Transaction.objects.get)(
            id=transaction_id,
            user=user,
            is_pending=True
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await sync_to_async(BalanceService.complete_transaction)(
            transaction=transaction,
            status='completed'
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        new_balance = await sync_to_async(BalanceService.get_balance)(user)

        await callback.message.answer(
            f"‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n"
            f"–ó–∞—á–∏—Å–ª–µ–Ω–æ: ‚ö° {amount} —Ç–æ–∫–µ–Ω–æ–≤\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {format_balance(new_balance)}\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ.",
            parse_mode="Markdown",
            reply_markup=get_main_menu_inline_keyboard()
        )

    except Transaction.DoesNotExist:
        await callback.message.answer(
            "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
            reply_markup=get_main_menu_inline_keyboard()
        )
    except Exception as e:
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}",
            reply_markup=get_main_menu_inline_keyboard()
        )


@router.callback_query(F.data.startswith("payment_failed:"))
async def handle_payment_failed(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Mini App
    """
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –∏–∑ callback
    data_parts = callback.data.split(":", 1)
    reason = data_parts[1] if len(data_parts) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"

    await callback.message.answer(
        f"‚ùå **–ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è**\n\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @support",
        parse_mode="Markdown",
        reply_markup=get_main_menu_inline_keyboard()
    )


@router.message(F.successful_payment)
async def handle_telegram_stars_payment(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º Telegram
    """
    payment = message.successful_payment

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await sync_to_async(TgUser.objects.get)(chat_id=message.from_user.id)

    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Stars –≤ —Ç–æ–∫–µ–Ω—ã (1 Star = 10 —Ç–æ–∫–µ–Ω–æ–≤)
        stars_amount = payment.total_amount  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars
        tokens_amount = Decimal(str(stars_amount * 10))

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = await sync_to_async(BalanceService.create_transaction)(
            user=user,
            amount=tokens_amount,
            transaction_type='deposit',
            payment_method='telegram_stars',
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Stars: {stars_amount} stars",
            payment_data={
                'telegram_payment_charge_id': payment.telegram_payment_charge_id,
                'provider_payment_charge_id': payment.provider_payment_charge_id,
                'invoice_payload': payment.invoice_payload
            }
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await sync_to_async(BalanceService.complete_transaction)(
            transaction=transaction,
            status='completed'
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        new_balance = await sync_to_async(BalanceService.get_balance)(user)

        await message.answer(
            f"‚úÖ **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!**\n\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ: ‚≠ê {stars_amount} Stars\n"
            f"–ó–∞—á–∏—Å–ª–µ–Ω–æ: ‚ö° {tokens_amount} —Ç–æ–∫–µ–Ω–æ–≤\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {format_balance(new_balance)}\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ.",
            parse_mode="Markdown",
            reply_markup=get_main_menu_inline_keyboard()
        )

    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @support —Å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=get_main_menu_inline_keyboard()
        )


@router.pre_checkout_query()
async def handle_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ Telegram Stars
    """
    # –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂
    await pre_checkout_query.answer(ok=True)


@router.message(F.text.startswith("PROMO"))
async def handle_promocode(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (—Ñ–æ—Ä–º–∞—Ç: PROMOXXXX).
    –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–µ—Ç –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤.
    """
    promo_code = message.text.strip()

    user = await sync_to_async(TgUser.objects.get)(chat_id=message.from_user.id)

    try:
        promocode = await sync_to_async(Promocode.objects.get)(code=promo_code, is_active=True)
    except Promocode.DoesNotExist:
        await message.answer(
            "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.",
            reply_markup=get_main_menu_inline_keyboard(),
        )
        return

    now = timezone.now()
    if promocode.valid_from > now or promocode.valid_until < now:
        await message.answer(
            "‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫.",
            reply_markup=get_main_menu_inline_keyboard(),
        )
        return

    already_used = await sync_to_async(promocode.used_by.filter(id=user.id).exists)()
    if already_used:
        await message.answer(
            "‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.",
            reply_markup=get_main_menu_inline_keyboard(),
        )
        return

    if promocode.max_uses and promocode.current_uses >= promocode.max_uses:
        await message.answer(
            "‚ùå –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.",
            reply_markup=get_main_menu_inline_keyboard(),
        )
        return

    if promocode.is_percentage:
        await message.answer(
            "‚ÑπÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.",
            reply_markup=get_main_menu_inline_keyboard(),
        )
        return

    bonus_amount = promocode.value
    transaction = await sync_to_async(BalanceService.add_bonus)(
        user,
        amount=bonus_amount,
        description=f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo_code}",
        description_en=f"Promocode {promo_code}",
    )

    await sync_to_async(promocode.used_by.add)(user)
    promocode.current_uses += 1
    promocode.total_activated += 1
    promocode.total_bonus_given += bonus_amount
    await sync_to_async(promocode.save)(
        update_fields=["current_uses", "total_activated", "total_bonus_given", "updated_at"]
    )

    new_balance = await sync_to_async(BalanceService.get_balance)(user)

    await message.answer(
        f"üéâ **–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
        f"–ü—Ä–æ–º–æ–∫–æ–¥: {promo_code}\n"
        f"–ë–æ–Ω—É—Å: ‚ö° {bonus_amount} —Ç–æ–∫–µ–Ω–æ–≤\n"
        f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {format_balance(new_balance)}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞!",
        parse_mode="Markdown",
        reply_markup=get_main_menu_inline_keyboard(),
    )


@router.callback_query(F.data == "main_menu")
async def handle_main_menu_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    """
    await callback.answer()

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await state.set_state(BotStates.main_menu)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    from django.conf import settings
    from botapp.keyboards import get_main_menu_keyboard

    PAYMENT_URL = getattr(settings, 'PAYMENT_MINI_APP_URL', 'https://example.com/payment')

    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard(PAYMENT_URL)
    )
