"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from typing import List

from botapp.states import BotStates
from botapp.keyboards import (
    get_image_models_keyboard,
    get_back_to_menu_keyboard,
    get_model_info_message,
    get_cancel_keyboard,
    get_main_menu_inline_keyboard,
    get_generation_start_message,
    get_generation_complete_message
)
from botapp.models import TgUser, AIModel
from botapp.business.generation import GenerationService
from botapp.business.balance import BalanceService, InsufficientBalanceError
from botapp.tasks import generate_image_task
from asgiref.sync import sync_to_async
import uuid

router = Router()


@router.message(F.text == "üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def create_image_start(message: Message, state: FSMContext):
    """
    –®–∞–≥ 1: –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    models = await sync_to_async(list)(
        AIModel.objects.filter(type='image', is_active=True).order_by('order')
    )

    if not models:
        await message.answer(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —Å inline –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
    await message.answer(
        "üé® **–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**",
        reply_markup=get_image_models_keyboard(models),
        parse_mode="Markdown"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    await state.set_state(BotStates.image_select_model)


@router.callback_query(F.data.startswith("img_model:"))
async def select_image_model(callback: CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 2: –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∂–¥–µ–º –ø—Ä–æ–º—Ç
    """
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º slug –º–æ–¥–µ–ª–∏ –∏–∑ callback data
    model_slug = callback.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –ë–î
    try:
        model = await sync_to_async(AIModel.objects.get)(slug=model_slug, is_active=True)
    except AIModel.DoesNotExist:
        await callback.message.answer(
            "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_model=model_slug, model_id=model.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await sync_to_async(TgUser.objects.get)(chat_id=callback.from_user.id)
    balance = await sync_to_async(BalanceService.get_balance)(user)

    if balance < model.price:
        await callback.message.answer(
            f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤**\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: ‚ö° {balance:.2f} —Ç–æ–∫–µ–Ω–æ–≤\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ‚ö° {model.price} —Ç–æ–∫–µ–Ω–æ–≤\n\n"
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ ‚ö° {model.price - balance:.2f} —Ç–æ–∫–µ–Ω–æ–≤",
            parse_mode="Markdown",
            reply_markup=get_main_menu_inline_keyboard()
        )
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ (–®–∞–≥ 2 –ø–æ –¢–ó)
    info_message = get_model_info_message(model)
    await callback.message.answer(
        info_message,
        parse_mode="Markdown"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞
    await state.set_state(BotStates.image_wait_prompt)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await state.update_data(
        model_slug=model_slug,
        model_id=model.id,
        model_name=model.display_name,
        model_price=float(model.price),
        max_images=model.max_input_images,
        supports_images=model.supports_image_input
    )


@router.message(BotStates.image_wait_prompt, F.text)
async def receive_image_prompt(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    data = await state.get_data()
    prompt = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø—Ä–æ–º—Ç–∞
    model = await sync_to_async(AIModel.objects.get)(id=data['model_id'])
    if len(prompt) > model.max_prompt_length:
        await message.answer(
            f"‚ùå –ü—Ä–æ–º—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {model.max_prompt_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–í–∞—à –ø—Ä–æ–º—Ç: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await sync_to_async(TgUser.objects.get)(chat_id=message.from_user.id)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    try:
        gen_request = await sync_to_async(GenerationService.create_generation_request)(
            user=user,
            ai_model=model,
            prompt=prompt,
            quantity=1,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            generation_type='text2image'
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await message.answer(
            get_generation_start_message(),
            parse_mode="Markdown"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
        await message.answer(
            f"üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å!**\n\n"
            f"–ú–æ–¥–µ–ª—å: {data['model_name']}\n"
            f"–ü—Ä–æ–º—Ç: {prompt[:100]}{'...' if len(prompt) > 100 else ''}\n\n"
            f"‚è≥ –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10-30 —Å–µ–∫—É–Ω–¥...\n"
            f"–Ø –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤!",
            parse_mode="Markdown",
            reply_markup=get_main_menu_inline_keyboard()
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generate_image_task.delay(gen_request.id)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except InsufficientBalanceError as e:
        await message.answer(
            f"‚ùå {str(e)}",
            reply_markup=get_main_menu_inline_keyboard()
        )
        await state.clear()

    except Exception as e:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_menu_inline_keyboard()
        )
        await state.clear()


@router.message(BotStates.image_wait_prompt, F.photo)
async def receive_image_for_remix(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ Remix
    """
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not data.get('supports_images'):
        await message.answer(
            "‚ùå –≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images = data.get('input_images', [])

    # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    images.append(photo.file_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    max_images = data.get('max_images', 4)
    if len(images) > max_images:
        await message.answer(
            f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {max_images}\n"
            f"–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏: {len(images)}",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(input_images=images)

    if len(images) < max_images:
        await message.answer(
            f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {len(images)} –∏–∑ {max_images} –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n\n"
            f"–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ {max_images - len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.",
            reply_markup=get_cancel_keyboard()
        )
    else:
        await message.answer(
            f"‚úÖ –í—Å–µ {max_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.",
            reply_markup=get_cancel_keyboard()
        )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞ –¥–ª—è Remix
    await state.set_state(BotStates.image_wait_images)


@router.callback_query(F.data == "main_menu")
async def handle_main_menu_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    """
    await callback.answer()

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await state.set_state(BotStates.main_menu)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–∑ menu.py
    from django.conf import settings
    from botapp.keyboards import get_main_menu_keyboard

    PAYMENT_URL = getattr(settings, 'PAYMENT_MINI_APP_URL', 'https://example.com/payment')

    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard(PAYMENT_URL)
    )