"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
"""
from typing import List
from decimal import Decimal
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    WebAppInfo
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from botapp.models import AIModel


# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===

def get_main_menu_keyboard(payment_url: str) -> ReplyKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ (4 –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó)
    payment_url - —Å—Å—ã–ª–∫–∞ –Ω–∞ Mini App –¥–ª—è –æ–ø–ª–∞—Ç—ã
    """
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
                KeyboardButton(text="üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ")
            ],
            [
                KeyboardButton(text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å (—Ü–µ–Ω—ã)"),
                # –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Mini App
                KeyboardButton(
                    text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                    web_app=WebAppInfo(url=payment_url)
                )
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard


def get_back_to_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–µ–∑–¥–µ)"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard


# === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===

def get_image_models_keyboard(models: List[AIModel]) -> InlineKeyboardMarkup:
    """–®–∞–≥ 1: –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    builder = InlineKeyboardBuilder()

    for model in models:
        if model.type == 'image' and model.is_active:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            builder.button(
                text=model.display_name,
                callback_data=f"img_model:{model.slug}"
            )

    builder.adjust(1)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.row(InlineKeyboardButton(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    ))

    return builder.as_markup()


# === –ì–ï–ù–ï–†–ê–¶–ò–Ø –í–ò–î–ï–û ===

def get_video_models_keyboard(models: List[AIModel]) -> InlineKeyboardMarkup:
    """–®–∞–≥ 1: –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∏–¥–µ–æ"""
    builder = InlineKeyboardBuilder()

    for model in models:
        if model.type == 'video' and model.is_active:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            builder.button(
                text=model.display_name,
                callback_data=f"vid_model:{model.slug}"
            )

    builder.adjust(1)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.row(InlineKeyboardButton(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    ))

    return builder.as_markup()


def get_video_format_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–∏–¥–µ–æ."""
    builder = InlineKeyboardBuilder()
    builder.button(text="9:16 (Vertical)", callback_data="video_format:9:16")
    builder.button(text="16:9 (Horizontal)", callback_data="video_format:16:9")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return builder.as_markup()


# === –ë–ê–õ–ê–ù–° ===

def get_balance_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –±–∞–ª–∞–Ω—Å–∞
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ú–æ–π –±–∞–ª–∞–Ω—Å (—Ü–µ–Ω—ã)"
    –í—ã–≤–æ–¥–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Ç–µ–∫—É—â–µ–º –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ
    builder.button(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")

    return builder.as_markup()


# === –û–ü–õ–ê–¢–ê ===

def get_payment_mini_app_keyboard(payment_url: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App –æ–ø–ª–∞—Ç—ã
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ inline –∫–Ω–æ–ø–∫—É
    """
    builder = InlineKeyboardBuilder()

    builder.button(
        text="üí≥ –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã",
        web_app=WebAppInfo(url=payment_url)
    )

    builder.adjust(1)
    return builder.as_markup()


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def get_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    return builder.as_markup()


def get_main_menu_inline_keyboard() -> InlineKeyboardMarkup:
    """Inline –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    return builder.as_markup()


def format_balance(balance: Decimal) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return f"‚ö° {balance:.2f} —Ç–æ–∫–µ–Ω–æ–≤"


def get_model_info_message(model: AIModel) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª–∏ (–®–∞–≥ 2)
    –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥–µ–ª–∏ –≤ –ë–î –≤–º–µ—Å—Ç–æ if-else
    """
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –º–æ–¥–µ–ª–∏
    message = (
        f"{model.display_name}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ‚ö°{model.price} —Ç–æ–∫–µ–Ω–æ–≤\n\n"
        f"{model.description}\n\n"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–¥–µ–ª–∏
    if model.type == 'image':
        if model.supports_image_input and model.max_input_images > 0:
            message += f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ {model.max_input_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π "
            message += "—á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º Remix üëá"
        else:
            message += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å üëá"
    elif model.type == 'video':
        if model.supports_image_input:
            message += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ‚úçÔ∏è —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —É–¥–æ–±–Ω–æ–º —è–∑—ã–∫–µ –∏–ª–∏ "
            message += "üåÑ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å üëá"
        else:
            message += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ‚úçÔ∏è —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —É–¥–æ–±–Ω–æ–º —è–∑—ã–∫–µ üëá"

    return message


def get_prices_info() -> str:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –±–∞–ª–∞–Ω—Å–∞"""
    return (
        "üí∞ **–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:**\n\n"
        "**–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n"
        "üçå Nano Banana - ‚ö°1.5 —Ç–æ–∫–µ–Ω–∞\n"
        "üé® Imagen 3.0 - ‚ö°3 —Ç–æ–∫–µ–Ω–∞ (—Å–∫–æ—Ä–æ)\n\n"
        "**–í–∏–¥–µ–æ:**\n"
        "‚ö° Veo 3.1 Fast - ‚ö°19 —Ç–æ–∫–µ–Ω–æ–≤\n"
        "üé¨ Veo 3.1 Pro - ‚ö°49 —Ç–æ–∫–µ–Ω–æ–≤ (—Å–∫–æ—Ä–æ)\n\n"
        "üíé –ß–µ–º –±–æ–ª—å—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ - —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ!\n"
        "üéÅ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ WELCOME2025 –¥–ª—è –±–æ–Ω—É—Å–∞"
    )


def get_generation_start_message() -> str:
    """–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    return "–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ"


def get_generation_complete_message(prompt: str, generation_type: str, model_name: str, **kwargs) -> str:
    """
    –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    Args:
        prompt: –ü—Ä–æ–º—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        generation_type: –¢–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (text2image, image2image, text2video, image2video)
        model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (duration, resolution, aspect_ratio –∏ —Ç.–¥.)
    """
    tool_names = {
        'text2image': 'text2image',
        'image2image': 'image2image',
        'text2video': 'text2video',
        'image2video': 'image2video'
    }

    segments = [f"–í–∞—à –∑–∞–ø—Ä–æ—Å: {prompt}"]
    segments.append(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_names.get(generation_type, generation_type)}")

    if 'video' in generation_type:
        duration = kwargs.get('duration')
        if duration:
            segments.append(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫.")
        aspect_ratio = kwargs.get('aspect_ratio')
        if aspect_ratio:
            segments.append(f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {aspect_ratio}")
        resolution = kwargs.get('resolution')
        if resolution:
            segments.append(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {resolution}")
    else:
        quantity = kwargs.get('quantity')
        if quantity and quantity > 1:
            segments.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
        aspect_ratio = kwargs.get('aspect_ratio')
        if aspect_ratio:
            segments.append(f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {aspect_ratio}")

    hashtag = kwargs.get('model_hashtag')
    if not hashtag:
        safe = ''.join(ch for ch in model_name if ch.isalnum())
        hashtag = f"#{safe.lower()}" if safe else "#model"
    segments.append(f"–ú–æ–¥–µ–ª—å: {hashtag}")

    charged_amount = kwargs.get('charged_amount')
    if charged_amount is not None:
        segments.append(f"–°–ø–∏—Å–∞–Ω–æ: ‚ö°{charged_amount:.2f}")

    balance_after = kwargs.get('balance_after')
    if balance_after is not None:
        segments.append(f"–ë–∞–ª–∞–Ω—Å: ‚ö°{balance_after:.2f}")

    formatted_segments = []
    for seg in segments:
        seg = seg.strip()
        if seg and seg[-1] not in '.!?':
            seg += '.'
        formatted_segments.append(seg)

    return ' '.join(formatted_segments)
