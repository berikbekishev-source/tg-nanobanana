#!/usr/bin/env python3
"""
–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ –±–æ–µ–≤–æ–π Railway endpoint (—Ä—É—á–Ω–æ–π smoke‚Äë—Ç–µ—Å—Ç).
–°–∫—Ä–∏–ø—Ç –ø–æ–ª–µ–∑–µ–Ω, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Lava.top –∂–∏–≤.
"""

from __future__ import annotations

import base64
import os
import time
from datetime import datetime
from typing import Optional

import requests

BASE_URL = os.environ.get(
    "LAVATOP_RAILWAY_BASE_URL",
    "https://web-production-96df.up.railway.app",
)
WEBHOOK_URL = f"{BASE_URL}/api/miniapp/lava-webhook"

WEBHOOK_SECRET = os.environ.get("LAVA_WEBHOOK_SECRET", "lava_webhook_secret_ABC123xyz789")
API_KEY = os.environ.get("LAVA_API_KEY", "HUavlwH154yV1KjiTbEKnZJyHxem7W0SgE7iIKsbq6MlSjNMulkOS3GgYEadREEb")

AUTH_HEADER = base64.b64encode(f":{WEBHOOK_SECRET}".encode("utf-8")).decode("utf-8")


def build_payload(order_id: str) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π payload –≤ ¬´—Å—Ç–∞—Ä–æ–º¬ª —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞—à –ø–∞—Ä—Å–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞)."""
    now = datetime.now()
    return {
        "id": f"pay_test_{int(time.time())}",
        "order_id": order_id,
        "amount": 5.00,
        "currency": "USD",
        "status": "success",
        "payment_id": f"pay_test_{int(time.time())}",
        "email": "test@example.com",
        "type": "payment",
        "event": "payment.success",
        "test_mode": True,
        "payment_method": "card",
        "custom_fields": {
            "user_id": os.environ.get("LAVA_FALLBACK_CHAT_ID", "283738604"),
            "credits": 100,
            "description": "Test payment for 100 tokens",
        },
        "created_at": now.isoformat(),
    }


def send_test_webhook(order_id: str = "90") -> Optional[requests.Response]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π webhook –Ω–∞ Railway."""
    payload = build_payload(order_id)
    headers = {
        "Content-Type": "application/json",
        "X-Test-Mode": "true",
        "User-Agent": "Lava.top/Webhook/ManualSmoke/1.0",
        "Authorization": f"Basic {AUTH_HEADER}",
        "X-API-Key": API_KEY,
    }

    print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ Railway...")
    print(f"URL: {WEBHOOK_URL}")
    print(f"Order ID: {payload['order_id']}")
    print("-" * 50)

    try:
        response = requests.post(WEBHOOK_URL, json=payload, headers=headers, timeout=30)
        print(f"üì¨ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")

        if response.status_code == 200:
            print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!")
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        else:
            print(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç {response.status_code}: {response.text}")

        return response

    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (—Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç)")
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ‚Äî Railway –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω?")
    except Exception as exc:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}")

    return None


def print_log_hints() -> None:
    """–ü–æ–¥—Å–∫–∞–∑–∫–∏, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Railway –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    print("\n" + "=" * 50)
    print("üìä –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê")
    print("=" * 50)
    print("1. railway logs --service web | grep 'Lava webhook'")
    print("2. railway logs --service worker | grep 'Payment' ")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")


if __name__ == "__main__":
    print("=" * 50)
    print("–¢–ï–°–¢ WEBHOOK LAVA.TOP ‚Üí RAILWAY")
    print("=" * 50)
    resp = send_test_webhook()
    if resp is not None:
        print_log_hints()
    print("\n‚ú® –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
