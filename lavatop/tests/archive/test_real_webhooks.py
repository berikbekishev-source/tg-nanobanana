#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–µ–±—Ö—É–∫–∞–º–∏ –æ—Ç Lava.top
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã
"""

import os
import sys
import json
import time
import requests
import hashlib
import hmac
from datetime import datetime, timedelta
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

import django
django.setup()

from django.conf import settings
from botapp.models import TgUser, UserBalance, Transaction
from decimal import Decimal


class WebhookReceiver:
    """–ü–æ–ª—É—á–∞—Ç–µ–ª—å –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, port=8080):
        self.port = port
        self.received_webhooks = []
        self.server = None
        self.server_thread = None

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ–±—Ö—É–∫–æ–≤"""

        class WebhookHandler(BaseHTTPRequestHandler):
            def do_POST(self):
                if self.path == '/webhook':
                    content_length = int(self.headers['Content-Length'])
                    post_data = self.rfile.read(content_length)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤–µ–±—Ö—É–∫
                    webhook_data = {
                        'headers': dict(self.headers),
                        'body': json.loads(post_data.decode('utf-8')),
                        'timestamp': datetime.now().isoformat()
                    }

                    self.server.parent.received_webhooks.append(webhook_data)

                    print(f"\n‚úÖ Webhook received at {webhook_data['timestamp']}")
                    print(f"Data: {json.dumps(webhook_data['body'], indent=2)}")

                    # –û—Ç–≤–µ—á–∞–µ–º 200 OK
                    self.send_response(200)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(json.dumps({'ok': True}).encode('utf-8'))

            def log_message(self, format, *args):
                pass  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏

        self.server = HTTPServer(('localhost', self.port), WebhookHandler)
        self.server.parent = self

        self.server_thread = threading.Thread(target=self.server.serve_forever)
        self.server_thread.daemon = True
        self.server_thread.start()

        print(f"üéØ Webhook receiver started on port {self.port}")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.server:
            self.server.shutdown()
            print("üõë Webhook receiver stopped")


class LavaTestMode:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º Lava.top"""

    def __init__(self):
        self.api_key = os.getenv('LAVA_API_KEY', 'HUavlwH154yV1KjiTbEKnZJyHxem7W0SgE7iIKsbq6MlSjNMulkOS3GgYEadREEb')
        self.base_url = "https://api.lava.top"
        self.test_mode = True

    def create_test_payment(self, webhook_url: str):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ Lava.top

        –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ Lava.top –ø–æ–∑–≤–æ–ª—è–µ—Ç:
        1. –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
        2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏
        3. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –≤–µ–±—Ö—É–∫–∏
        """

        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json',
            'X-Test-Mode': 'true'  # –í–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        }

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç
        invoice_data = {
            'amount': 5.00,
            'currency': 'USD',
            'order_id': f'test_{int(time.time())}',
            'description': 'Test payment - 100 tokens',
            'webhook_url': webhook_url,
            'success_url': 'https://example.com/success',
            'fail_url': 'https://example.com/fail',
            'test_mode': True,  # –í–∞–∂–Ω–æ: –≤–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            'auto_complete': True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
        }

        print(f"\nüìù Creating test invoice...")
        print(f"Webhook URL: {webhook_url}")
        print(f"Data: {json.dumps(invoice_data, indent=2)}")

        try:
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ v2 API
            response = requests.post(
                f"{self.base_url}/api/v2/invoice",
                headers=headers,
                json=invoice_data,
                timeout=30
            )

            if response.status_code == 404:
                # –ï—Å–ª–∏ v2 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º v1
                response = requests.post(
                    f"{self.base_url}/api/v1/invoice",
                    headers=headers,
                    json=invoice_data,
                    timeout=30
                )

            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Test invoice created!")
                print(f"Invoice ID: {data.get('id')}")
                print(f"Payment URL: {data.get('url')}")
                return data
            else:
                print(f"‚ùå Failed to create invoice: {response.status_code}")
                print(f"Response: {response.text}")
                return None

        except Exception as e:
            print(f"‚ùå Error: {e}")
            return None

    def trigger_test_webhook(self, invoice_id: str):
        """
        –¢—Ä–∏–≥–≥–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Lava.top
        –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—Ä—É—á–Ω—É—é —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å –≤–µ–±—Ö—É–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        """

        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json',
            'X-Test-Mode': 'true'
        }

        # –ü—ã—Ç–∞–µ–º—Å—è —Ç—Ä–∏–≥–≥–µ—Ä–Ω—É—Ç—å –≤–µ–±—Ö—É–∫
        trigger_data = {
            'invoice_id': invoice_id,
            'action': 'complete',  # –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂
            'trigger_webhook': True  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫
        }

        try:
            response = requests.post(
                f"{self.base_url}/api/test/trigger-webhook",
                headers=headers,
                json=trigger_data,
                timeout=30
            )

            if response.status_code == 200:
                print(f"‚úÖ Webhook triggered for invoice {invoice_id}")
                return True
            else:
                print(f"‚ö†Ô∏è Manual webhook trigger not available: {response.status_code}")
                return False

        except Exception as e:
            print(f"‚ö†Ô∏è Trigger endpoint not available: {e}")
            return False


class NgrokTunnel:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ngrok —Ç—É–Ω–Ω–µ–ª–µ–º –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤–µ–±—Ö—É–∫—É"""

    def __init__(self, port=8080):
        self.port = port
        self.public_url = None
        self.process = None

    def start(self):
        """–ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–Ω–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ ngrok
            result = subprocess.run(['which', 'ngrok'], capture_output=True, text=True)
            if result.returncode != 0:
                print("‚ö†Ô∏è ngrok –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:")
                print("brew install ngrok/ngrok/ngrok")
                return None

            # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
            print(f"üöá Starting ngrok tunnel on port {self.port}...")
            self.process = subprocess.Popen(
                ['ngrok', 'http', str(self.port), '--log=stdout'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )

            # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL —á–µ—Ä–µ–∑ API ngrok
            time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è

            try:
                response = requests.get('http://localhost:4040/api/tunnels')
                tunnels = response.json()
                for tunnel in tunnels['tunnels']:
                    if tunnel['proto'] == 'https':
                        self.public_url = tunnel['public_url']
                        print(f"‚úÖ Ngrok tunnel started: {self.public_url}")
                        return self.public_url
            except:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL ngrok. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Railway URL")

        except Exception as e:
            print(f"‚ùå Error starting ngrok: {e}")
            return None

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ ngrok"""
        if self.process:
            self.process.terminate()
            print("üõë Ngrok tunnel stopped")


def test_with_railway_webhook():
    """–¢–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Railway URL (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞)"""

    print("\n" + "="*60)
    print("üöÇ TESTING WITH RAILWAY WEBHOOK URL")
    print("="*60)

    # –ü–æ–ª—É—á–∞–µ–º Railway URL
    railway_url = os.getenv('RAILWAY_PUBLIC_DOMAIN', 'web-production-96df.up.railway.app')
    if not railway_url:
        print("‚ö†Ô∏è RAILWAY_PUBLIC_DOMAIN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: railway variables")
        return

    webhook_url = f"https://{railway_url}/api/miniapp/lava-webhook"
    print(f"Webhook URL: {webhook_url}")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    lava = LavaTestMode()
    invoice = lava.create_test_payment(webhook_url)

    if invoice:
        print(f"\nüìß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Railway –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞:")
        print(f"railway logs --service web | grep 'Lava webhook'")

        # –ñ–¥–µ–º –≤–µ–±—Ö—É–∫
        print(f"\n‚è≥ –û–∂–∏–¥–∞–µ–º –≤–µ–±—Ö—É–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥...")
        time.sleep(30)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
        check_invoice_status(invoice['id'])


def test_with_local_ngrok():
    """–¢–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏ ngrok"""

    print("\n" + "="*60)
    print("üè† TESTING WITH LOCAL WEBHOOK + NGROK")
    print("="*60)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π webhook receiver
    receiver = WebhookReceiver(port=8080)
    receiver.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
    ngrok = NgrokTunnel(port=8080)
    public_url = ngrok.start()

    if not public_url:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ngrok")
        receiver.stop()
        return

    webhook_url = f"{public_url}/webhook"

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    lava = LavaTestMode()
    invoice = lava.create_test_payment(webhook_url)

    if invoice:
        # –ü—Ä–æ–±—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä–Ω—É—Ç—å –≤–µ–±—Ö—É–∫ –≤—Ä—É—á–Ω—É—é
        lava.trigger_test_webhook(invoice['id'])

        # –ñ–¥–µ–º –≤–µ–±—Ö—É–∫
        print(f"\n‚è≥ –û–∂–∏–¥–∞–µ–º –≤–µ–±—Ö—É–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥...")
        for i in range(30):
            if receiver.received_webhooks:
                print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(receiver.received_webhooks)} –≤–µ–±—Ö—É–∫–æ–≤!")
                break
            time.sleep(1)
            print(".", end="", flush=True)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if receiver.received_webhooks:
            print("\n\nüìä RECEIVED WEBHOOKS:")
            for webhook in receiver.received_webhooks:
                print(f"Time: {webhook['timestamp']}")
                print(f"Body: {json.dumps(webhook['body'], indent=2)}")
        else:
            print("\n‚ùå –í–µ–±—Ö—É–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    receiver.stop()
    ngrok.stop()


def check_invoice_status(invoice_id: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ API"""

    api_key = os.getenv('LAVA_API_KEY', 'HUavlwH154yV1KjiTbEKnZJyHxem7W0SgE7iIKsbq6MlSjNMulkOS3GgYEadREEb')
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }

    try:
        response = requests.get(
            f"https://api.lava.top/api/v1/invoices/{invoice_id}",
            headers=headers,
            timeout=10
        )

        if response.status_code == 200:
            data = response.json()
            print(f"\nüìã Invoice Status:")
            print(f"ID: {data.get('id')}")
            print(f"Status: {data.get('status')}")
            print(f"Amount: {data.get('amount')} {data.get('currency')}")
            return data
        else:
            print(f"‚ùå Failed to check status: {response.status_code}")

    except Exception as e:
        print(f"‚ùå Error checking status: {e}")


def create_test_database_entries():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    print("\nüìù Creating test database entries...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user, created = TgUser.objects.get_or_create(
        chat_id=123456789,
        defaults={
            'username': 'test_user',
            'first_name': 'Test',
            'last_name': 'User'
        }
    )

    # –°–æ–∑–¥–∞–µ–º –±–∞–ª–∞–Ω—Å
    balance, _ = UserBalance.objects.get_or_create(
        user=test_user,
        defaults={'balance': Decimal('0')}
    )

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transaction = Transaction.objects.create(
        user=test_user,
        type='deposit',
        amount=Decimal('5.00'),
        balance_after=balance.balance,
        description='Test payment for 100 tokens',
        payment_method='card',
        is_pending=True,
        is_completed=False
    )

    print(f"‚úÖ Test user: {test_user.username}")
    print(f"‚úÖ Transaction ID: {transaction.id}")

    return test_user, transaction


def run_complete_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""

    print("\n" + "üéØ"*30)
    print("LAVA.TOP PAYMENT SYSTEM TEST")
    print("Real webhooks without actual payments")
    print("üéØ"*30)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    test_user, transaction = create_test_database_entries()

    print("\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. Railway webhook (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞)")
    print("2. Local + ngrok (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)")
    print("3. –û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞")

    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ").strip()

    if choice == '1':
        test_with_railway_webhook()
    elif choice == '2':
        test_with_local_ngrok()
    elif choice == '3':
        test_with_railway_webhook()
        test_with_local_ngrok()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    run_complete_test()