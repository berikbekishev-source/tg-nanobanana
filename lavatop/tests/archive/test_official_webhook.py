#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–≤ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º Lava.top
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ API
"""

import requests
import json
import time
from datetime import datetime, timezone

# URL –≤–∞—à–µ–≥–æ webhook endpoint
WEBHOOK_URL = 'https://web-production-96df.up.railway.app/api/miniapp/lava-webhook'

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
WEBHOOK_SECRET = 'lava_webhook_secret_ABC123xyz789'


def send_webhook(payload, description="Test webhook"):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ Railway endpoint"""

    headers = {
        'Content-Type': 'application/json',
        'X-API-Key': WEBHOOK_SECRET,
        'User-Agent': 'Lava.top/Webhook/1.0'
    }

    print(f"\n{'='*60}")
    print(f"üì§ {description}")
    print(f"{'='*60}")
    print(f"Event Type: {payload.get('eventType', 'N/A')}")
    print(f"Status: {payload.get('status', 'N/A')}")

    try:
        response = requests.post(
            WEBHOOK_URL,
            json=payload,
            headers=headers,
            timeout=30
        )

        print(f"Response Code: {response.status_code}")

        if response.status_code == 200:
            print(f"‚úÖ SUCCESS: {response.text}")
        else:
            print(f"‚ùå ERROR: {response.text}")

        return response

    except Exception as e:
        print(f"‚ùå Failed: {e}")
        return None


def test_successful_payment():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞"""

    payload = {
        "eventType": "payment.success",
        "product": {
            "id": "d31384b8-e412-4be5-a2ec-297ae6666c8f",
            "title": "100 –¢–æ–∫–µ–Ω–æ–≤"
        },
        "buyer": {
            "email": "test@example.com"
        },
        "contractId": "91",  # ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î
        "amount": 5.00,
        "currency": "USD",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "status": "completed",
        "errorMessage": ""
    }

    return send_webhook(payload, "SUCCESSFUL PAYMENT (100 Tokens)")


def test_failed_payment():
    """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""

    payload = {
        "eventType": "payment.failed",
        "product": {
            "id": "d31384b8-e412-4be5-a2ec-297ae6666c8f",
            "title": "100 –¢–æ–∫–µ–Ω–æ–≤"
        },
        "buyer": {
            "email": "test@example.com"
        },
        "contractId": "91",  # –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        "amount": 5.00,
        "currency": "USD",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "status": "failed",
        "errorMessage": "Payment window is opened but not completed"
    }

    return send_webhook(payload, "FAILED PAYMENT")


def test_subscription_active():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂)"""

    payload = {
        "eventType": "payment.success",
        "product": {
            "id": "72d53efb-3696-469f-b856-f0d815748dd6",
            "title": "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ (–º–µ—Å—è—Ü)"
        },
        "buyer": {
            "email": "subscriber@example.com"
        },
        "contractId": "92",
        "amount": 25.00,
        "currency": "USD",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "status": "subscription-active",
        "errorMessage": ""
    }

    return send_webhook(payload, "SUBSCRIPTION ACTIVATED")


def test_subscription_recurring_success():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""

    payload = {
        "eventType": "subscription.recurring.payment.success",
        "product": {
            "id": "72d53efb-3696-469f-b856-f0d815748dd6",
            "title": "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ (–º–µ—Å—è—Ü)"
        },
        "buyer": {
            "email": "subscriber@example.com"
        },
        "contractId": "93",
        "parentContractId": "92",  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        "amount": 25.00,
        "currency": "USD",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "status": "subscription-active",
        "errorMessage": ""
    }

    return send_webhook(payload, "SUBSCRIPTION RENEWED")


def test_subscription_failed():
    """–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""

    payload = {
        "eventType": "subscription.recurring.payment.failed",
        "product": {
            "id": "72d53efb-3696-469f-b856-f0d815748dd6",
            "title": "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ (–º–µ—Å—è—Ü)"
        },
        "buyer": {
            "email": "subscriber@example.com"
        },
        "contractId": "94",
        "parentContractId": "92",
        "amount": 25.00,
        "currency": "USD",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "status": "subscription-failed",
        "errorMessage": "Not sufficient funds"
    }

    return send_webhook(payload, "SUBSCRIPTION RENEWAL FAILED")


def test_subscription_cancelled():
    """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""

    payload = {
        "eventType": "subscription.cancelled",
        "contractId": "92",
        "product": {
            "id": "72d53efb-3696-469f-b856-f0d815748dd6",
            "title": "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ (–º–µ—Å—è—Ü)"
        },
        "buyer": {
            "email": "subscriber@example.com"
        },
        "cancelledAt": datetime.now(timezone.utc).isoformat(),
        "willExpireAt": datetime.now(timezone.utc).isoformat()
    }

    return send_webhook(payload, "SUBSCRIPTION CANCELLED")


def test_with_russian_currency():
    """–¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ä—É–±–ª—è—Ö"""

    payload = {
        "eventType": "payment.success",
        "product": {
            "id": "d31384b8-e412-4be5-a2ec-297ae6666c8f",
            "title": "100 –¢–æ–∫–µ–Ω–æ–≤"
        },
        "buyer": {
            "email": "russian@example.com"
        },
        "contractId": "95",
        "amount": 450.00,
        "currency": "RUB",  # –†—É–±–ª–∏
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "status": "completed",
        "errorMessage": ""
    }

    return send_webhook(payload, "PAYMENT IN RUB")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""

    print("\n" + "üöÄ"*30)
    print("LAVA.TOP WEBHOOK TESTING")
    print("Official Format According to API Specification")
    print("üöÄ"*30)

    print("\nWebhook URL:", WEBHOOK_URL)
    print("Testing all event types...")

    # –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
    test_successful_payment()
    time.sleep(1)

    # –¢–µ—Å—Ç 2: –ù–µ—É–¥–∞—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
    test_failed_payment()
    time.sleep(1)

    # –¢–µ—Å—Ç 3: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    test_subscription_active()
    time.sleep(1)

    # –¢–µ—Å—Ç 4: –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    test_subscription_recurring_success()
    time.sleep(1)

    # –¢–µ—Å—Ç 5: –ù–µ—É–¥–∞—á–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
    test_subscription_failed()
    time.sleep(1)

    # –¢–µ—Å—Ç 6: –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    test_subscription_cancelled()
    time.sleep(1)

    # –¢–µ—Å—Ç 7: –ü–ª–∞—Ç–µ–∂ –≤ —Ä—É–±–ª—è—Ö
    test_with_russian_currency()

    print("\n" + "="*60)
    print("‚úÖ ALL TESTS COMPLETED")
    print("="*60)

    print("\nüìä EXPECTED BEHAVIOR:")
    print("  ‚úì payment.success ‚Üí Credits added to user balance")
    print("  ‚úì payment.failed ‚Üí Transaction marked as failed")
    print("  ‚úì subscription.* ‚Üí Subscription status updated")
    print("  ‚úì All events ‚Üí Logged in Railway logs")

    print("\nüîç CHECK LOGS:")
    print("  railway logs --service web | grep 'webhook'")


def test_specific_event(event_type):
    """–¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""

    if event_type == "success":
        test_successful_payment()
    elif event_type == "failed":
        test_failed_payment()
    elif event_type == "subscription":
        test_subscription_active()
    elif event_type == "recurring":
        test_subscription_recurring_success()
    elif event_type == "cancelled":
        test_subscription_cancelled()
    else:
        print(f"Unknown event type: {event_type}")
        print("Available: success, failed, subscription, recurring, cancelled")


if __name__ == "__main__":
    import sys

    if len(sys.argv) > 1:
        # –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        test_specific_event(sys.argv[1])
    else:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        run_all_tests()